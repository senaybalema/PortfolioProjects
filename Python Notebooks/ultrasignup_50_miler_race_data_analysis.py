# -*- coding: utf-8 -*-
"""UltraSignup 50 Miler Race Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wBmfUOUuW59kJmlm9rER4m8DIOCCr45H
"""



#import libraries

import pandas as pd
import numpy as np
import seaborn as sns

"""TO DO:
- Combine first and last name
- Create total minutes
- Rename division to gender
- Need to put city state in the lat lon
"""

#!pip install geopy

# translate city/states to lat and log
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
from geopy.extra.rate_limiter import RateLimiter

df = pd.read_csv(r"ff_race_50.csv")
df.head()

df.info()

df2 = df.dropna(axis=1)
df2.head()

df2['fullname']=df2['First'] + ' ' + df2['Last']

df2.head()

df2['Time'] = pd.to_timedelta(df2['Time'])
df2.dtypes

df2['Time'].dt.total_seconds()/ 60

df2['Total_Minutes']= df2['Time'].dt.total_seconds()/ 60

df2['Total_Minutes'] = df2['Total_Minutes'].round().astype(int)

df2.head()

df2.rename(columns = {'Division':'Gender'},inplace=True)
df2.head()

def get_lat_long(city,state):
    address = f"{city},{state}"
    try:
        geolocator=Nominatim(user_agent="running", timeout=10)
        location = geolocator.geocode(address)
        if location:
            return location.latitude, location.longitude
        else:
            return None,None
    except GeocoderTimedOut:
        return None, None

#It looks like you're defining a function get_lat_long that takes a city and state as input
#and returns their latitude and longitude using geocoding.
#This function uses the geopy library, specifically the Nominatim geocoder.
#Here's a breakdown of the function:
#It constructs the address string using the provided city and state.
#It tries to geocode the address using the Nominatim geocoder with a timeout of 10 seconds.
#If the geocoding is successful and a location is found, it returns the latitude and longitude.
#If the geocoding fails due to a timeout, it returns None for both latitude and longitude.
#This function seems well-defined, but you might want to ensure you have the
#necessary imports (Nominatim and GeocoderTimedOut) from the geopy library for it to work correctly.
#Also, remember to handle other possible exceptions if necessary.

df2['latitude'],df2['longitude'] = zip(*df2.apply(lambda x: get_lat_long(x['City'],x['State']),axis=1))

#The apply function is used to apply a function along an axis of the DataFrame.
#In your case, you're applying a lambda function to each row (axis=1),
#where the lambda function calls get_lat_long with the values from the 'City' and 'State' columns of the DataFrame.

#Then, the zip(*...) function is used to unzip the resulting tuples m
#(latitude, longitude pairs) into separate latitude and longitude columns.

df2.head()

df2['latlong'] = df2['latitude'].astype(str) + ',' +df2['longitude'].astype('str')
df2.head()

df2.to_csv('ultracleanedupdata_output.csv', index=False)

